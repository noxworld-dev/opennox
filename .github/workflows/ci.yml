name: ci
on:
  push:
    branches:
      - master
      - dev
      - ci_tests
      - dennwc
    tags:
      - v*
  pull_request:
    branches:
      - master
      - dev

jobs:
  hybrid_linux_go:
    name: Go build on Linux Host
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.x'

      - name: Check Go version
        run: go version

      - name: Install C dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -m
          sudo apt-get install -y build-essential ccache cmake gcc gcc-multilib libsdl2-dev libsdl2-dev:i386 libopenal-dev:i386 libsdl2-2.0-0:i386 libopenal1:i386

      - name: Check GCC version
        run: gcc -v

      - name: Install Go dependencies
        run: cd ./src && go mod download

      - name: Go build
        run: cd ./src && ./build_go.sh

      - name: Prepare the binaries
        run: |
          cp ./src/opennox /tmp/opennox
          cp ./src/opennox-hd /tmp/opennox-hd
          cp ./src/opennox-server /tmp/opennox-server
          cp ./src/noxtools /tmp/noxtools
          tar -czf /tmp/opennox-linux.tar.gz /tmp/opennox /tmp/opennox-hd /tmp/opennox-server /tmp/noxtools

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: opennox-linux
          path: /tmp/opennox-linux.tar.gz

  hybrid_linux_mingw_go:
    name: Go Win build on Linux Host
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.x'

      - name: Check Go version
        run: go version

      - name: Install C dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -m
          sudo apt-get install -y build-essential curl rsync zip unzip ccache cmake gcc gcc-multilib gcc-mingw-w64 libsdl2-dev libsdl2-dev:i386 libopenal-dev:i386 libsdl2-2.0-0:i386 libopenal1:i386

      - name: Check GCC version
        run: gcc -v

      - name: Install SDL MinGW package
        run: |
          cd /tmp
          curl -so /tmp/sdl2.tar.gz https://www.libsdl.org/release/SDL2-devel-2.0.14-mingw.tar.gz
          tar -xzf /tmp/sdl2.tar.gz
          sudo rsync -r /tmp/SDL2-2.0.14/i686-w64-mingw32/include/ /usr/i686-w64-mingw32/include/
          sudo rsync -r /tmp/SDL2-2.0.14/i686-w64-mingw32/lib/ /usr/i686-w64-mingw32/lib/
          echo "405eaff3eb18f2e08fe669ef9e63bc9a8710b7d343756f238619761e9b60407d /tmp/sdl2.tar.gz" > /tmp/checksum.txt
          sha256sum -c /tmp/checksum.txt

      - name: Install OpenAL package
        run: |
          cd /tmp
          curl -so /tmp/openal.zip https://openal-soft.org/openal-binaries/openal-soft-1.21.1-bin.zip
          unzip -o /tmp/openal.zip
          sudo rsync -r /tmp/openal-soft-1.21.1-bin/include/ /usr/i686-w64-mingw32/include/
          sudo rsync -r /tmp/openal-soft-1.21.1-bin/libs/Win32/ /usr/i686-w64-mingw32/lib/
          echo "2e4b005c4f8057adcf4459d9b239d3fe745a9128079b2a091f899550f2d931b0 /tmp/openal.zip" > /tmp/checksum.txt
          sha256sum -c /tmp/checksum.txt

      - name: Install Go dependencies
        run: cd ./src && go mod download

      - name: Go build
        run: cd ./src && ./build_go_win.sh

      - name: Prepare the binary
        run: |
          cp ./src/opennox.exe /tmp/opennox.exe
          cp ./src/opennox-hd.exe /tmp/opennox-hd.exe
          cp ./src/opennox-server.exe /tmp/opennox-server.exe
          cp ./src/noxtools.exe /tmp/noxtools.exe
          zip /tmp/opennox-win.zip /tmp/opennox.exe /tmp/opennox-hd.exe /tmp/opennox-server.exe /tmp/noxtools.exe

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: opennox-win
          path: /tmp/opennox-win.zip

  hybrid_linux_gcc:
    name: alpine-386-gcc-github on Linux Host
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up cache for ccache
        uses: actions/cache@v2
        with:
          path: ccache
          key: ccache-gcc-i386
          restore-keys: |
            ccache-gcc-
            ccache-

      - name: Build GCC
        uses: docker://noxworld/alpine-386-gcc-github

      - name: Prepare the binary
        run: |
          cp ./build/out /tmp/nox
          tar -czf /tmp/nox-linux.tar.gz /tmp/nox

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: nox-linux
          path: /tmp/nox-linux.tar.gz

  hybrid_linux_wasm:
    name: alpine-wasm-github on Linux Host
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up cache for emcache
        uses: actions/cache@v2
        with:
          path: emcache
          key: emcache-emsdk-wasm
          restore-keys: |
            emcache-emsdk-
            emcache-

      - name: Build WASM
        uses: docker://noxworld/alpine-wasm-github

  windows_native_hosted:
    name: MSVC on ${{ matrix.config.name }} Host
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - {
            name: "WinServer 2019",
            os: windows-2019,
            vcpkg: {
              triplet: x86-windows,
              commitId: '6185aa76504a5025f36754324abf307cc776f3da',
              responseFile: 'vcpkg.txt'
            }
            }

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: '@${{ github.workspace }}/${{ matrix.config.vcpkg.responseFile }}'
          vcpkgTriplet: '${{ matrix.config.vcpkg.triplet }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '${{ matrix.config.vcpkg.commitId }}'

      - name: Run CMake+gmake
        uses: lukka/run-cmake@v3
        id: runcmake
        with:
          useVcpkgToolchainFile: true
          cmakeGenerator: 'VS16Win32'
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/src/CMakeLists.txt'
          cmakeBuildType: 'Release'
          buildWithCMakeArgs: '--config Release'
          buildDirectory: '${{ runner.workspace }}/b/gmake/'

      - name: Prepare the binary
        run: |
          move ${{ runner.workspace }}\b\gmake\Release\out.exe ${{ runner.workspace }}\b\gmake\Release\nox.exe

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
           name: nox-win
           path: |
             ${{ runner.workspace }}\b\gmake\Release\*.exe
             ${{ runner.workspace }}\b\gmake\Release\*.dll

  release_repackage_linux:
    name: Repackage Linux release
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [hybrid_linux_go]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/download-artifact@v2
        with:
          name: opennox-linux
          path: ~/Downloads/

      - name: Repackage release
        run: |
          rm -rf /tmp/linux-tmp
          mkdir -p /tmp/linux-tmp
          tar -xvzf ~/Downloads/opennox-linux.tar.gz -C /tmp/linux-tmp/

          rm -rf /tmp/opennox-linux
          mkdir -p /tmp/opennox-linux
          cp /tmp/linux-tmp/tmp/* /tmp/opennox-linux
          cp ./CHANGELOG.md /tmp/opennox-linux

          mkdir /tmp/opennox-linux/docs
          cp ./docs/game-*.md /tmp/opennox-linux/docs/
          cp ./docs/server-*.md /tmp/opennox-linux/docs/
          cp ./docs/mod-*.md /tmp/opennox-linux/docs/
          cp ./docs/maps-*.md /tmp/opennox-linux/docs/
          cp ./docs/*-sample.yml /tmp/opennox-linux/docs/

          export VERSION=$(git name-rev --tags --name-only $(git rev-parse HEAD))
          cd /tmp/opennox-linux
          rm -f /tmp/OpenNox-linux-*.tar.gz
          tar -czf /tmp/OpenNox-linux-$VERSION.tar.gz ./*

      - name: Upload the archive
        uses: actions/upload-artifact@v2
        with:
          name: opennox-release-linux
          path: /tmp/OpenNox-linux-*.tar.gz

  release_repackage_win:
      name: Repackage Windows release
      runs-on: ubuntu-20.04
      if: startsWith(github.ref, 'refs/tags/v')
      needs: [hybrid_linux_mingw_go, windows_native_hosted]
      steps:
        - name: Install NSIS
          run: sudo apt-get install -y nsis

        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
            submodules: true

        - uses: actions/download-artifact@v2
          with:
            name: nox-win # needed for SDL and OpenAL DLLs
            path: ~/Downloads/

        - uses: actions/download-artifact@v2
          with:
            name: opennox-win
            path: ~/Downloads/

        - name: Repackage release
          run: |
            rm -rf /tmp/win-tmp
            mkdir -p /tmp/win-tmp
            unzip ~/Downloads/opennox-win.zip -d /tmp/win-tmp/

            rm -rf /tmp/opennox-win
            mkdir -p /tmp/opennox-win
            cp ~/Downloads/*.dll /tmp/opennox-win/
            cp /tmp/win-tmp/tmp/*.exe /tmp/opennox-win/
            cp ./CHANGELOG.md /tmp/opennox-win/

            mkdir /tmp/opennox-win/docs
            cp ./docs/game-*.md /tmp/opennox-win/docs/
            cp ./docs/server-*.md /tmp/opennox-win/docs/
            cp ./docs/mod-*.md /tmp/opennox-win/docs/
            cp ./docs/maps-*.md /tmp/opennox-win/docs/
            cp ./docs/*-sample.yml /tmp/opennox-win/docs/

            export VERSION=$(git name-rev --tags --name-only $(git rev-parse HEAD))
            makensis -DVERSION="$VERSION" -DDATA="/tmp/opennox-win/" -DOUTDIR="/tmp/" ./scripts/opennox.nsi
            cd /tmp/opennox-win
            rm -f /tmp/OpenNox-*.zip
            zip -9 -r /tmp/OpenNox-$VERSION.zip ./*

        - name: Upload the archive
          uses: actions/upload-artifact@v2
          with:
            name: opennox-release-win
            path: |
              /tmp/OpenNox-*.zip
              /tmp/OpenNox-*.exe
