package opennox

import (
	"image"
	"math"
)

func nox_xxx_math_roundDir(v int32) int32 {
	return int32(uint8(v))
}

func nox_xxx_math_roundDirI16(v int16) uint16 {
	return uint16(uint8(v))
}

func fabs(v float32) float32 {
	vi := math.Float32bits(v)
	vi &= 0x7FFFFFFF
	return math.Float32frombits(vi)
}

// sincosTable16 assumes circle radius of 16, and expects an angle in range [0,256).
var sincosTable16 = []image.Point{
	{16, 0}, {16, 0}, {16, 1}, {16, 1}, {16, 2}, {16, 2}, {16, 2}, {16, 3},
	{16, 3}, {16, 4}, {16, 4}, {15, 4}, {15, 5}, {15, 5}, {15, 5}, {15, 6},
	{15, 6}, {15, 6}, {14, 7}, {14, 7}, {14, 8}, {14, 8}, {14, 8}, {14, 9},
	{13, 9}, {13, 9}, {13, 10}, {13, 10}, {12, 10}, {12, 10}, {12, 11}, {12, 11},
	{11, 11}, {11, 12}, {11, 12}, {10, 12}, {10, 12}, {10, 13}, {10, 13}, {9, 13},
	{9, 13}, {9, 14}, {8, 14}, {8, 14}, {8, 14}, {7, 14}, {7, 14}, {6, 15},
	{6, 15}, {6, 15}, {5, 15}, {5, 15}, {5, 15}, {4, 15}, {4, 16}, {4, 16},
	{3, 16}, {3, 16}, {2, 16}, {2, 16}, {2, 16}, {1, 16}, {1, 16}, {0, 16},
	{0, 16}, {0, 16}, {0, 16}, {0, 16}, {-1, 16}, {-1, 16}, {-1, 16}, {-2, 16},
	{-2, 16}, {-3, 16}, {-3, 16}, {-3, 15}, {-4, 15}, {-4, 15}, {-4, 15}, {-5, 15},
	{-5, 15}, {-5, 15}, {-6, 14}, {-6, 14}, {-7, 14}, {-7, 14}, {-7, 14}, {-8, 14},
	{-8, 13}, {-8, 13}, {-9, 13}, {-9, 13}, {-9, 12}, {-9, 12}, {-10, 12}, {-10, 12},
	{-10, 11}, {-11, 11}, {-11, 11}, {-11, 10}, {-11, 10}, {-12, 10}, {-12, 10}, {-12, 9},
	{-12, 9}, {-13, 9}, {-13, 8}, {-13, 8}, {-13, 8}, {-13, 7}, {-13, 7}, {-14, 6},
	{-14, 6}, {-14, 6}, {-14, 5}, {-14, 5}, {-14, 5}, {-14, 4}, {-15, 4}, {-15, 4},
	{-15, 3}, {-15, 3}, {-15, 2}, {-15, 2}, {-15, 2}, {-15, 1}, {-15, 1}, {-15, 0},
	{-15, 0}, {-15, 0}, {-15, 0}, {-15, 0}, {-15, -1}, {-15, -1}, {-15, -1}, {-15, -2},
	{-15, -2}, {-15, -3}, {-15, -3}, {-14, -3}, {-14, -4}, {-14, -4}, {-14, -4}, {-14, -5},
	{-14, -5}, {-14, -5}, {-13, -6}, {-13, -6}, {-13, -7}, {-13, -7}, {-13, -7}, {-13, -8},
	{-12, -8}, {-12, -8}, {-12, -9}, {-12, -9}, {-11, -9}, {-11, -9}, {-11, -10}, {-11, -10},
	{-10, -10}, {-10, -11}, {-10, -11}, {-9, -11}, {-9, -11}, {-9, -12}, {-9, -12}, {-8, -12},
	{-8, -12}, {-8, -13}, {-7, -13}, {-7, -13}, {-7, -13}, {-6, -13}, {-6, -13}, {-5, -14},
	{-5, -14}, {-5, -14}, {-4, -14}, {-4, -14}, {-4, -14}, {-3, -14}, {-3, -15}, {-3, -15},
	{-2, -15}, {-2, -15}, {-1, -15}, {-1, -15}, {-1, -15}, {0, -15}, {0, -15}, {0, -15},
	{0, -15}, {0, -15}, {1, -15}, {1, -15}, {2, -15}, {2, -15}, {2, -15}, {3, -15},
	{3, -15}, {4, -15}, {4, -15}, {4, -14}, {5, -14}, {5, -14}, {5, -14}, {6, -14},
	{6, -14}, {6, -14}, {7, -13}, {7, -13}, {8, -13}, {8, -13}, {8, -13}, {9, -13},
	{9, -12}, {9, -12}, {10, -12}, {10, -12}, {10, -11}, {10, -11}, {11, -11}, {11, -11},
	{11, -10}, {12, -10}, {12, -10}, {12, -9}, {12, -9}, {13, -9}, {13, -9}, {13, -8},
	{13, -8}, {14, -8}, {14, -7}, {14, -7}, {14, -7}, {14, -6}, {14, -6}, {15, -5},
	{15, -5}, {15, -5}, {15, -4}, {15, -4}, {15, -4}, {15, -3}, {16, -3}, {16, -3},
	{16, -2}, {16, -2}, {16, -1}, {16, -1}, {16, -1}, {16, 0}, {16, 0}, {16, 0},
}
